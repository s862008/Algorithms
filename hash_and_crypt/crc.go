/*
реализация алгоритма Циклический избыточный код (в частности, CRC8, CRC16, CRC32)
*/


package main

import (
"fmt"
)

// Функция для вычисления CRC-8
func crc8(data []byte) byte {
var crc byte = 0x00
poly := byte(0x8C) // Полином для CRC-8 (0x8C)

for _, b := range data {
crc ^= b
for i := 0; i < 8; i++ {
if crc&0x80 != 0 {
crc = (crc « 1) ^ poly
} else {
crc «= 1
}
}
}

return crc
}

func main() {
data := []byte{0x01, 0x02, 0x03, 0x04, 0x05} // Пример данных для CRC-8
result := crc8(data)
fmt.Printf("CRC-8: 0x%02X\n", result)
}

/*
В этом примере мы определяем функцию `crc8`, которая принимает срез байтов `data` и возвращает результат CRC-8. Мы используем полином `0x8C` для вычисления CRC-8.
В функции `main` мы создаем пример данных `data` и вызываем функцию `crc8` для вычисления CRC-8 для этих данных. Затем мы выводим результат в формате шестнадцатеричного числа.
Вы можете изменить данные в срезе `data`, чтобы вычислить CRC-8 для своих собственных данных.
*/
